{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useRef, useState } from \"react\";\nconst MainSlideCall = () => {\n  _s();\n  const [bannerOrder, setBanner] = useState(1);\n  const bannerRef = useRef(1);\n  const [mainorder, setMaim] = useState(1);\n  const MainRef = useRef(1);\n  const [topBannerSet, setTopBannerSet] = useState(false);\n  const [mainBannerSet, setMainBannerSet] = useState(false);\n  const setOrder = useCallback((num, type) => {\n    type === \"top\" ? bannerRef.current = num : MainRef.current = num;\n    type === \"top\" ? setBanner(num) : setMaim(num);\n  }, []);\n  let topBannerPlay = null;\n  const bannerPlay = useCallback(() => {\n    console.log(\"bannerPlay\");\n    setInterval(() => {\n      slideCall(bannerRef.current === 3 ? 1 : bannerRef.current + 1, \"top\", 500);\n    }, 6500);\n  }, []);\n  const mainPlay = useCallback(() => {\n    //console.log(\"mainPlay\")   \n    return setInterval(() => {\n      slideCall(MainRef.current === 6 ? 1 : MainRef.current + 1, \"main\", 500);\n    }, 6500);\n  }, []);\n  const slidePlay = () => {\n    bannerPlay();\n    mainPlay();\n  };\n  const topButton = (num, type) => {\n    clearInterval(bannerPlay());\n    slideCall(num, type, 500);\n    bannerPlay();\n    console.log(\"탑베너 초기화\");\n  };\n  const onClickButton = (num, type) => {\n    //console.log(type)\n\n    if (type === \"top\") {\n      clearInterval(bannerPlay());\n      slideCall(num, type, 500);\n      bannerPlay();\n    } else if (type === \"main\") {\n      clearInterval(mainPlay());\n      slideCall(num, type, 500);\n      mainPlay();\n    }\n    setTimeout(() => {\n      slideCall(num, type, 500);\n    }, 300);\n\n    //type==\"top\"?clearInterval(bannerPlay()):clearInterval(mainPlay());\n  };\n  const slideCall = (num, type, time) => {\n    type === \"top\" ? setTopBannerSet(true) : setMainBannerSet(true);\n    setTimeout(() => {\n      type === \"top\" ? setTopBannerSet(false) : setMainBannerSet(false);\n      setOrder(num, type);\n    }, time);\n  };\n  const slideReCall = (num, type, time) => {\n    type === \"top\" ? setTopBannerSet(true) : setMainBannerSet(true);\n    setTimeout(() => {\n      type === \"top\" ? setTopBannerSet(false) : setMainBannerSet(false);\n      setOrder(num - 1, type);\n    }, time);\n  };\n  return [bannerOrder, mainorder, topBannerSet, mainBannerSet, {\n    slidePlay,\n    onClickButton,\n    topButton\n  }];\n};\n_s(MainSlideCall, \"qLr9heC56cEotvi66G3MwM/UySg=\");\n_c = MainSlideCall;\nexport default MainSlideCall;\nvar _c;\n$RefreshReg$(_c, \"MainSlideCall\");","map":{"version":3,"names":["useCallback","useRef","useState","MainSlideCall","_s","bannerOrder","setBanner","bannerRef","mainorder","setMaim","MainRef","topBannerSet","setTopBannerSet","mainBannerSet","setMainBannerSet","setOrder","num","type","current","topBannerPlay","bannerPlay","console","log","setInterval","slideCall","mainPlay","slidePlay","topButton","clearInterval","onClickButton","setTimeout","time","slideReCall","_c","$RefreshReg$"],"sources":["C:/dunkindonuts/donkin_frontend/src/mainSlideCall.js"],"sourcesContent":["import { useCallback, useRef, useState } from \"react\";\r\n\r\n\r\nconst MainSlideCall = () =>{\r\n\r\n    const [bannerOrder,setBanner] = useState(1);\r\n    const bannerRef = useRef(1)\r\n  \r\n    const [mainorder,setMaim] = useState(1);\r\n    const MainRef = useRef(1)\r\n\r\n    const [topBannerSet, setTopBannerSet] = useState(false);\r\n    const [mainBannerSet, setMainBannerSet] = useState(false);\r\n\r\n    const setOrder = useCallback((num,type) => {\r\n        \r\n        type===\"top\"?bannerRef.current =num: MainRef.current = num\r\n        type===\"top\"?setBanner(num): setMaim(num)\r\n  }, []);\r\n\r\n  let topBannerPlay = null;\r\n  const bannerPlay = useCallback(()=>{\r\n      console.log(\"bannerPlay\")   \r\n      \r\n       setInterval(() => {  \r\n        slideCall(bannerRef.current===3?1:bannerRef.current+1,\"top\",500);\r\n    },6500); \r\n },[])\r\n const mainPlay = useCallback(()=>{\r\n    //console.log(\"mainPlay\")   \r\n    return setInterval(() => {     \r\n        slideCall(MainRef.current===6?1:MainRef.current+1,\"main\",500);\r\n    },6500); \r\n },[])\r\n const slidePlay=()=>{\r\n        bannerPlay()\r\n        mainPlay()\r\n }\r\n const topButton=(num,type)=>{\r\n     clearInterval(bannerPlay());\r\n     slideCall(num,type,500);\r\n     bannerPlay()\r\n     console.log(\"탑베너 초기화\");\r\n    \r\n }\r\n const onClickButton = (num,type)=>{\r\n    //console.log(type)\r\n    \r\n    if(type===\"top\"){\r\n        clearInterval(bannerPlay())\r\n        slideCall(num,type,500)\r\n        bannerPlay()\r\n    }else if(type===\"main\"){\r\n        clearInterval(mainPlay())\r\n        slideCall(num,type,500)\r\n        mainPlay()\r\n    }\r\n    setTimeout(()=>{\r\n        slideCall(num,type,500)\r\n    },300)\r\n    \r\n    //type==\"top\"?clearInterval(bannerPlay()):clearInterval(mainPlay());\r\n};\r\n    const slideCall = (num,type,time) =>{\r\n\r\n            type===\"top\"?setTopBannerSet(true):setMainBannerSet(true)\r\n            setTimeout(()=>{\r\n                type===\"top\"?setTopBannerSet(false):setMainBannerSet(false)\r\n                setOrder(num,type);\r\n            },time)     \r\n        };\r\n        const slideReCall = (num,type,time) =>{\r\n            type===\"top\"?setTopBannerSet(true):setMainBannerSet(true)\r\n            setTimeout(()=>{\r\n                type===\"top\"?setTopBannerSet(false):setMainBannerSet(false)\r\n                setOrder(num-1,type);\r\n            },time)     \r\n        };\r\n    return [bannerOrder,mainorder,topBannerSet,mainBannerSet,{slidePlay,onClickButton,topButton},];    \r\n\r\n\r\n}\r\nexport default MainSlideCall;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}