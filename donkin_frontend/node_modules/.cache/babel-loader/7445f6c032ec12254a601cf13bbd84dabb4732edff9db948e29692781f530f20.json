{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useRef, useState } from \"react\";\nconst MainSlideCall = () => {\n  _s();\n  const [slideData, setSlideData] = useState({});\n  const [state, setState] = useState(false);\n  const addSideData = useCallback((point, css, index, max) => {\n    setSlideData({\n      ...slideData,\n      [point]: {\n        point: point,\n        css: css,\n        index: index,\n        max: max\n      }\n    });\n    setState(true);\n  }, []);\n  //slideData[\"top\"][\"index\"]=3\n\n  const select = target => {\n    console.log(slideData);\n    console.log(slideData[target][\"css\"]);\n  };\n  const changre = target => {\n    console.log(slideData);\n    console.log(slideData[target][\"css\"] = true);\n  };\n  const bannerPlay = target => {\n    //console.log(type)\n    slideData[target][\"point\"] = setInterval(() => {\n      callSlide(slideData[target][\"index\"] === slideData[target][\"max\"] ? 1 : slideData[target][\"index\"] + 1, 500);\n    }, 6500);\n  };\n  const changeBanner = (num, target) => {\n    //console.log(type)\n    clearInterval(slideData[target][\"point\"]);\n    callSlide(num, target, 500);\n    onPlay();\n    setTimeout(() => {\n      callSlide(num, target, 500);\n    }, 300);\n  };\n  const callSlide = (num, target, time) => {\n    slideData[target][\"css\"] = true;\n    setTimeout(() => {\n      slideData[target][\"css\"] = false;\n      slideData[target][\"index\"] = num;\n    }, time);\n  };\n  const [bannerOrder, setBanner] = useState(1);\n  const bannerRef = useRef(1);\n  const bannerPlayRef = useRef();\n  const [mainorder, setMaim] = useState(1);\n  const MainRef = useRef(1);\n  const [topBannerSet, setTopBannerSet] = useState(false);\n  const [mainBannerSet, setMainBannerSet] = useState(false);\n\n  //console.log(\"bannerOrder_\"+bannerOrder)\n  //console.log(\"topBannerSet_\"+topBannerSet)\n\n  const setOrder = useCallback((num, type) => {\n    type === \"top\" ? bannerRef.current = num : MainRef.current = num;\n    type === \"top\" ? setBanner(num) : setMaim(num);\n  }, []);\n  const onPlay = () => {\n    //console.log(type)\n    bannerPlayRef.current = setInterval(() => {\n      console.log(\"Interval\");\n      slideCall(bannerRef.current === 3 ? 1 : bannerRef.current + 1, \"top\", 500);\n    }, 6500);\n  };\n  const onClickButton = (num, type) => {\n    //console.log(type)\n\n    if (type === \"top\") {\n      clearInterval(bannerPlayRef.current);\n      slideCall(num, type, 500);\n      onPlay();\n    } else if (type === \"main\") {\n      clearInterval(mainPlay());\n      slideCall(num, type, 500);\n      mainPlay();\n    }\n    setTimeout(() => {\n      slideCall(num, type, 500);\n    }, 300);\n  };\n  const mainPlay = useCallback(() => {\n    //console.log(\"mainPlay\")   \n    return setInterval(() => {\n      slideCall(MainRef.current === 6 ? 1 : MainRef.current + 1, \"main\", 500);\n    }, 6500);\n  }, []);\n  const slidePlay = () => {\n    onPlay();\n    //mainPlay();\n  };\n  const slideCall = (num, type, time) => {\n    type === \"top\" ? setTopBannerSet(true) : setMainBannerSet(true);\n    setTimeout(() => {\n      type === \"top\" ? setTopBannerSet(false) : setMainBannerSet(false);\n      setOrder(num, type);\n    }, time);\n  };\n  const slideReCall = (num, type, time) => {\n    type === \"top\" ? setTopBannerSet(true) : setMainBannerSet(true);\n    setTimeout(() => {\n      type === \"top\" ? setTopBannerSet(false) : setMainBannerSet(false);\n      setOrder(num - 1, type);\n    }, time);\n  };\n  return [bannerOrder, mainorder, topBannerSet, mainBannerSet, slideData, state, {\n    addSideData,\n    slidePlay,\n    onClickButton,\n    select,\n    changre,\n    bannerPlay,\n    changeBanner\n  }];\n};\n_s(MainSlideCall, \"wM83edb4EqUZInnfLcBmGIhTpAU=\");\n_c = MainSlideCall;\nexport default MainSlideCall;\nvar _c;\n$RefreshReg$(_c, \"MainSlideCall\");","map":{"version":3,"names":["useCallback","useRef","useState","MainSlideCall","_s","slideData","setSlideData","state","setState","addSideData","point","css","index","max","select","target","console","log","changre","bannerPlay","setInterval","callSlide","changeBanner","num","clearInterval","onPlay","setTimeout","time","bannerOrder","setBanner","bannerRef","bannerPlayRef","mainorder","setMaim","MainRef","topBannerSet","setTopBannerSet","mainBannerSet","setMainBannerSet","setOrder","type","current","slideCall","onClickButton","mainPlay","slidePlay","slideReCall","_c","$RefreshReg$"],"sources":["C:/dunkindonuts/donkin_frontend/src/mainSlideCall.js"],"sourcesContent":["import { useCallback, useRef, useState } from \"react\";\r\n\r\n\r\nconst MainSlideCall = () =>{\r\n    \r\n    const [slideData,setSlideData] =useState({})\r\n    const [state,setState]= useState(false)\r\n    const addSideData = useCallback((point,css,index,max) => {  \r\n        setSlideData({\r\n            ...slideData,\r\n            [point] : {\r\n                    point : point,\r\n                    css : css,\r\n                    index :index,\r\n                    max : max,\r\n            },\r\n        })\r\n        setState(true)\r\n    }, []);\r\n    //slideData[\"top\"][\"index\"]=3\r\n\r\n    const select = (target)=>{\r\n        console.log(slideData)\r\n        console.log(slideData[target][\"css\"])\r\n    }\r\n    const changre = (target)=>{\r\n        console.log(slideData)\r\n        console.log(slideData[target][\"css\"]=true)\r\n    }\r\n    const bannerPlay = (target)=>{\r\n        //console.log(type)\r\n        slideData[target][\"point\"] = setInterval(() => {   \r\n          callSlide(slideData[target][\"index\"] ===slideData[target][\"max\"] ?1:slideData[target][\"index\"]+1,500);\r\n      },6500)\r\n    }\r\n    const changeBanner = (num,target)=>{\r\n        //console.log(type)\r\n        clearInterval(slideData[target][\"point\"])\r\n        callSlide(num,target,500)\r\n        onPlay()\r\n      \r\n        setTimeout(()=>{\r\n            callSlide(num,target,500)\r\n        },300)\r\n        \r\n    };   \r\n\r\n    const callSlide = (num,target,time) =>{\r\n\r\n        slideData[target][\"css\"]=true\r\n        setTimeout(()=>{\r\n            slideData[target][\"css\"]=false\r\n            slideData[target][\"index\"]=num\r\n        },time)     \r\n    };\r\n\r\n    \r\n        const [bannerOrder,setBanner] = useState(1);\r\n        const bannerRef = useRef(1)\r\n        const bannerPlayRef = useRef();\r\n        \r\n         const [mainorder,setMaim] = useState(1);\r\n         const MainRef = useRef(1)\r\n        \r\n        const [topBannerSet, setTopBannerSet] = useState(false);\r\n        const [mainBannerSet, setMainBannerSet] = useState(false);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //console.log(\"bannerOrder_\"+bannerOrder)\r\n    //console.log(\"topBannerSet_\"+topBannerSet)\r\n\r\n    const setOrder = useCallback((num,type) => {\r\n        type===\"top\"?bannerRef.current =num: MainRef.current = num\r\n        type===\"top\"?setBanner(num): setMaim(num)\r\n  }, []);\r\n\r\n\r\n\r\n const onPlay = ()=>{\r\n    //console.log(type)\r\n    bannerPlayRef.current = setInterval(() => {  \r\n        console.log(\"Interval\")   \r\n      slideCall(bannerRef.current===3?1:bannerRef.current+1,\"top\",500);\r\n  },6500)\r\n    \r\n};\r\n const onClickButton = (num,type)=>{\r\n    //console.log(type)\r\n    \r\n    if(type===\"top\"){\r\n        clearInterval(bannerPlayRef.current)\r\n        slideCall(num,type,500)\r\n        onPlay()\r\n    }else if(type===\"main\"){\r\n        clearInterval(mainPlay())\r\n        slideCall(num,type,500)\r\n        mainPlay()\r\n    }\r\n    setTimeout(()=>{\r\n        slideCall(num,type,500)\r\n    },300)\r\n    \r\n};\r\n const mainPlay = useCallback(()=>{\r\n    //console.log(\"mainPlay\")   \r\n    return setInterval(() => {     \r\n        slideCall(MainRef.current===6?1:MainRef.current+1,\"main\",500);\r\n    },6500); \r\n },[])\r\n const slidePlay=()=>{\r\n    onPlay();\r\n        //mainPlay();\r\n }\r\n \r\n    const slideCall = (num,type,time) =>{\r\n\r\n            type===\"top\"?setTopBannerSet(true):setMainBannerSet(true)\r\n            setTimeout(()=>{\r\n                type===\"top\"?setTopBannerSet(false):setMainBannerSet(false)\r\n                setOrder(num,type);\r\n            },time)     \r\n        };\r\n        const slideReCall = (num,type,time) =>{\r\n            type===\"top\"?setTopBannerSet(true):setMainBannerSet(true)\r\n            setTimeout(()=>{\r\n                type===\"top\"?setTopBannerSet(false):setMainBannerSet(false)\r\n                setOrder(num-1,type);\r\n            },time)     \r\n        };\r\n    return [bannerOrder,mainorder,topBannerSet,mainBannerSet,slideData,state,{addSideData,slidePlay,onClickButton,select,changre,bannerPlay,changeBanner},];    \r\n\r\n\r\n\r\n}\r\nexport default MainSlideCall;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}