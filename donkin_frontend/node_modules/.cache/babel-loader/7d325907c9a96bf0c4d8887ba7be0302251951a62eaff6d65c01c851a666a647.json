{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useRef, useState } from \"react\";\nconst MainSlideCall = () => {\n  _s();\n  const sideData = {\n    css: false,\n    index: '1',\n    max: ''\n  };\n  console(validateDataClone());\n  const addSideData = useCallback((target, dataObj) => {\n    const validateDataClone = {\n      ...sideData,\n      ...dataObj\n    };\n  }, []);\n  const [bannerOrder, setBanner] = useState(1);\n  const bannerRef = useRef(1);\n  const bannerPlayRef = useRef();\n  const [mainorder, setMaim] = useState(1);\n  const MainRef = useRef(1);\n  const [topBannerSet, setTopBannerSet] = useState(false);\n  const [mainBannerSet, setMainBannerSet] = useState(false);\n\n  //console.log(\"bannerOrder_\"+bannerOrder)\n  //console.log(\"topBannerSet_\"+topBannerSet)\n\n  const setOrder = useCallback((num, type) => {\n    type === \"top\" ? bannerRef.current = num : MainRef.current = num;\n    type === \"top\" ? setBanner(num) : setMaim(num);\n  }, []);\n  const onPlay = () => {\n    //console.log(type)\n    bannerPlayRef.current = setInterval(() => {\n      console.log(\"Interval\");\n      slideCall(bannerRef.current === 3 ? 1 : bannerRef.current + 1, \"top\", 500);\n    }, 6500);\n  };\n  const onClickButton = (num, type) => {\n    //console.log(type)\n\n    if (type === \"top\") {\n      clearInterval(bannerPlayRef.current);\n      slideCall(num, type, 500);\n      onPlay();\n    } else if (type === \"main\") {\n      clearInterval(mainPlay());\n      slideCall(num, type, 500);\n      mainPlay();\n    }\n    setTimeout(() => {\n      slideCall(num, type, 500);\n    }, 300);\n  };\n  const mainPlay = useCallback(() => {\n    //console.log(\"mainPlay\")   \n    return setInterval(() => {\n      slideCall(MainRef.current === 6 ? 1 : MainRef.current + 1, \"main\", 500);\n    }, 6500);\n  }, []);\n  const slidePlay = () => {\n    onPlay();\n    //mainPlay();\n  };\n  const slideCall = (num, type, time) => {\n    type === \"top\" ? setTopBannerSet(true) : setMainBannerSet(true);\n    setTimeout(() => {\n      type === \"top\" ? setTopBannerSet(false) : setMainBannerSet(false);\n      setOrder(num, type);\n    }, time);\n  };\n  const slideReCall = (num, type, time) => {\n    type === \"top\" ? setTopBannerSet(true) : setMainBannerSet(true);\n    setTimeout(() => {\n      type === \"top\" ? setTopBannerSet(false) : setMainBannerSet(false);\n      setOrder(num - 1, type);\n    }, time);\n  };\n  return [bannerOrder, mainorder, topBannerSet, mainBannerSet, {\n    addSideData,\n    slidePlay,\n    onClickButton\n  }];\n};\n_s(MainSlideCall, \"/16zZtSVx9Du76wxjXTU2HyEp+M=\");\n_c = MainSlideCall;\nexport default MainSlideCall;\nvar _c;\n$RefreshReg$(_c, \"MainSlideCall\");","map":{"version":3,"names":["useCallback","useRef","useState","MainSlideCall","_s","sideData","css","index","max","console","validateDataClone","addSideData","target","dataObj","bannerOrder","setBanner","bannerRef","bannerPlayRef","mainorder","setMaim","MainRef","topBannerSet","setTopBannerSet","mainBannerSet","setMainBannerSet","setOrder","num","type","current","onPlay","setInterval","log","slideCall","onClickButton","clearInterval","mainPlay","setTimeout","slidePlay","time","slideReCall","_c","$RefreshReg$"],"sources":["C:/dunkindonuts/donkin_frontend/src/mainSlideCall.js"],"sourcesContent":["import { useCallback, useRef, useState } from \"react\";\r\n\r\n\r\nconst MainSlideCall = () =>{\r\n    \r\n    const sideData ={\r\n        css : false,\r\n        index :'1',\r\n        max : '',\r\n    };\r\n    \r\n    console(validateDataClone())\r\n    \r\n    \r\n    const addSideData = useCallback((target, dataObj) => {\r\n\r\n        const validateDataClone = { ...sideData, ...dataObj };\r\n      }, []);\r\n    \r\n    \r\n    \r\n    \r\n        const [bannerOrder,setBanner] = useState(1);\r\n        const bannerRef = useRef(1)\r\n        const bannerPlayRef = useRef();\r\n        \r\n         const [mainorder,setMaim] = useState(1);\r\n         const MainRef = useRef(1)\r\n        \r\n        const [topBannerSet, setTopBannerSet] = useState(false);\r\n        const [mainBannerSet, setMainBannerSet] = useState(false);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //console.log(\"bannerOrder_\"+bannerOrder)\r\n    //console.log(\"topBannerSet_\"+topBannerSet)\r\n\r\n    const setOrder = useCallback((num,type) => {\r\n        type===\"top\"?bannerRef.current =num: MainRef.current = num\r\n        type===\"top\"?setBanner(num): setMaim(num)\r\n  }, []);\r\n\r\n\r\n\r\n const onPlay = ()=>{\r\n    //console.log(type)\r\n    bannerPlayRef.current = setInterval(() => {  \r\n        console.log(\"Interval\")   \r\n      slideCall(bannerRef.current===3?1:bannerRef.current+1,\"top\",500);\r\n  },6500)\r\n    \r\n};\r\n const onClickButton = (num,type)=>{\r\n    //console.log(type)\r\n    \r\n    if(type===\"top\"){\r\n        clearInterval(bannerPlayRef.current)\r\n        slideCall(num,type,500)\r\n        onPlay()\r\n    }else if(type===\"main\"){\r\n        clearInterval(mainPlay())\r\n        slideCall(num,type,500)\r\n        mainPlay()\r\n    }\r\n    setTimeout(()=>{\r\n        slideCall(num,type,500)\r\n    },300)\r\n    \r\n};\r\n const mainPlay = useCallback(()=>{\r\n    //console.log(\"mainPlay\")   \r\n    return setInterval(() => {     \r\n        slideCall(MainRef.current===6?1:MainRef.current+1,\"main\",500);\r\n    },6500); \r\n },[])\r\n const slidePlay=()=>{\r\n    onPlay();\r\n        //mainPlay();\r\n }\r\n \r\n    const slideCall = (num,type,time) =>{\r\n\r\n            type===\"top\"?setTopBannerSet(true):setMainBannerSet(true)\r\n            setTimeout(()=>{\r\n                type===\"top\"?setTopBannerSet(false):setMainBannerSet(false)\r\n                setOrder(num,type);\r\n            },time)     \r\n        };\r\n        const slideReCall = (num,type,time) =>{\r\n            type===\"top\"?setTopBannerSet(true):setMainBannerSet(true)\r\n            setTimeout(()=>{\r\n                type===\"top\"?setTopBannerSet(false):setMainBannerSet(false)\r\n                setOrder(num-1,type);\r\n            },time)     \r\n        };\r\n    return [bannerOrder,mainorder,topBannerSet,mainBannerSet,{addSideData,slidePlay,onClickButton},];    \r\n\r\n\r\n\r\n}\r\nexport default MainSlideCall;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}