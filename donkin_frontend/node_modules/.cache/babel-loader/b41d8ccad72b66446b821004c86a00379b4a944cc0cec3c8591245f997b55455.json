{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useRef, useState } from \"react\";\nconst MainSlideCall = () => {\n  _s();\n  // const [slideData,setSlideData] =useState({})\n  // const [state,setState]= useState(false)\n  // const addSideData = useCallback((point,css,index,max) => {  \n  //     setSlideData({\n  //         ...slideData,\n  //         [point] : {\n  //                 point : point,\n  //                 css : css,\n  //                 index :index,\n  //                 max : max,\n  //         },\n  //     })\n  //     setState(true)\n  // }, []);\n  // //slideData[\"top\"][\"index\"]=3\n\n  // const select = (target)=>{\n  //     console.log(slideData)\n  //     console.log(slideData[target][\"css\"])\n  // }\n  // const changre = (target)=>{\n  //     console.log(slideData)\n  //     console.log(slideData[target][\"css\"]=true)\n  // }\n  // const bannerPlay = (target)=>{\n  //     //console.log(type)\n  //     slideData[target][\"point\"] = setInterval(() => {   \n  //       callSlide(slideData[target][\"index\"] ===slideData[target][\"max\"] ?1:slideData[target][\"index\"]+1,500);\n  //   },6500)\n  // }\n  // const changeBanner = (num,target)=>{\n  //     //console.log(type)\n  //     clearInterval(slideData[target][\"point\"])\n  //     callSlide(num,target,500)\n  //     bannerPlay(target)\n\n  //     setTimeout(()=>{\n  //         callSlide(num,target,500)\n  //     },300)\n\n  // };   \n\n  // const callSlide = (num,target,time) =>{\n\n  //     slideData[target][\"css\"]=true\n  //     setTimeout(()=>{\n  //         slideData[target][\"css\"]=false\n  //         slideData[target][\"index\"]=num\n  //     },time)     \n  // };\n\n  const [bannerOrder, setBanner] = useState(1);\n  const bannerRef = useRef(1);\n  const topbannerPlayRef = useRef();\n  const mainbannerPlayRef = useRef();\n  const [mainorder, setMaim] = useState(1);\n  const MainRef = useRef(1);\n  const [topBannerSet, setTopBannerSet] = useState(false);\n  const [mainBannerSet, setMainBannerSet] = useState(false);\n  const setOrder = useCallback((num, type) => {\n    type === \"top\" ? bannerRef.current = num : MainRef.current = num;\n    type === \"top\" ? setBanner(num) : setMaim(num);\n  }, []);\n  const onTopPlay = () => {\n    //console.log(type)\n    topbannerPlayRef.current = setInterval(() => {\n      console.log(\"Interval\");\n      slideCall(bannerRef.current === 3 ? 1 : bannerRef.current + 1, \"top\", 500);\n    }, 6500);\n  };\n  const onMainPlay = () => {\n    mainbannerPlayRef.current = setInterval(() => {\n      console.log(\"Interval\");\n      slideCall(MainRef.current === 6 ? 1 : MainRef.current + 1, \"main\", 500);\n    }, 6500);\n  };\n  const onClickButton = (num, type) => {\n    if (type === \"top\") {\n      clearInterval(topbannerPlayRef.current);\n      slideCall(num, type, 500);\n      onTopPlay();\n    } else if (type === \"main\") {\n      clearInterval(mainbannerPlayRef.current);\n      slideCall(num, type, 500);\n      onMainPlay();\n    }\n    setTimeout(() => {\n      slideCall(num, type, 500);\n    }, 300);\n  };\n  const slideCall = (num, type, time) => {\n    type === \"top\" ? setTopBannerSet(true) : setMainBannerSet(true);\n    setTimeout(() => {\n      type === \"top\" ? setTopBannerSet(false) : setMainBannerSet(false);\n      setOrder(num, type);\n    }, time);\n  };\n  return [bannerOrder, mainorder, topBannerSet, mainBannerSet, {\n    onClickButton,\n    onTopPlay,\n    onMainPlay\n  }];\n};\n_s(MainSlideCall, \"X8/Y2JeHGmAgvAdkNvGYX9OxOkM=\");\n_c = MainSlideCall;\nexport default MainSlideCall;\nvar _c;\n$RefreshReg$(_c, \"MainSlideCall\");","map":{"version":3,"names":["useCallback","useRef","useState","MainSlideCall","_s","bannerOrder","setBanner","bannerRef","topbannerPlayRef","mainbannerPlayRef","mainorder","setMaim","MainRef","topBannerSet","setTopBannerSet","mainBannerSet","setMainBannerSet","setOrder","num","type","current","onTopPlay","setInterval","console","log","slideCall","onMainPlay","onClickButton","clearInterval","setTimeout","time","_c","$RefreshReg$"],"sources":["C:/dunkindonuts/donkin_frontend/src/mainSlideCall.js"],"sourcesContent":["import { useCallback, useRef, useState } from \"react\";\r\n\r\n\r\nconst MainSlideCall = () =>{\r\n    \r\n    // const [slideData,setSlideData] =useState({})\r\n    // const [state,setState]= useState(false)\r\n    // const addSideData = useCallback((point,css,index,max) => {  \r\n    //     setSlideData({\r\n    //         ...slideData,\r\n    //         [point] : {\r\n    //                 point : point,\r\n    //                 css : css,\r\n    //                 index :index,\r\n    //                 max : max,\r\n    //         },\r\n    //     })\r\n    //     setState(true)\r\n    // }, []);\r\n    // //slideData[\"top\"][\"index\"]=3\r\n\r\n    // const select = (target)=>{\r\n    //     console.log(slideData)\r\n    //     console.log(slideData[target][\"css\"])\r\n    // }\r\n    // const changre = (target)=>{\r\n    //     console.log(slideData)\r\n    //     console.log(slideData[target][\"css\"]=true)\r\n    // }\r\n    // const bannerPlay = (target)=>{\r\n    //     //console.log(type)\r\n    //     slideData[target][\"point\"] = setInterval(() => {   \r\n    //       callSlide(slideData[target][\"index\"] ===slideData[target][\"max\"] ?1:slideData[target][\"index\"]+1,500);\r\n    //   },6500)\r\n    // }\r\n    // const changeBanner = (num,target)=>{\r\n    //     //console.log(type)\r\n    //     clearInterval(slideData[target][\"point\"])\r\n    //     callSlide(num,target,500)\r\n    //     bannerPlay(target)\r\n      \r\n    //     setTimeout(()=>{\r\n    //         callSlide(num,target,500)\r\n    //     },300)\r\n        \r\n    // };   \r\n\r\n    // const callSlide = (num,target,time) =>{\r\n\r\n    //     slideData[target][\"css\"]=true\r\n    //     setTimeout(()=>{\r\n    //         slideData[target][\"css\"]=false\r\n    //         slideData[target][\"index\"]=num\r\n    //     },time)     \r\n    // };\r\n\r\n    \r\n        const [bannerOrder,setBanner] = useState(1);\r\n        const bannerRef = useRef(1)\r\n        const topbannerPlayRef = useRef();\r\n        const mainbannerPlayRef = useRef();\r\n         const [mainorder,setMaim] = useState(1);\r\n         const MainRef = useRef(1)\r\n        \r\n        const [topBannerSet, setTopBannerSet] = useState(false);\r\n        const [mainBannerSet, setMainBannerSet] = useState(false);\r\n\r\n\r\n\r\n    const setOrder = useCallback((num,type) => {\r\n        type===\"top\"?bannerRef.current =num: MainRef.current = num\r\n        type===\"top\"?setBanner(num): setMaim(num)\r\n  }, []);\r\n\r\n\r\n\r\n    const onTopPlay = ()=>{\r\n        //console.log(type)\r\n        topbannerPlayRef.current = setInterval(() => {  \r\n            console.log(\"Interval\")   \r\n        slideCall(bannerRef.current===3?1:bannerRef.current+1,\"top\",500);\r\n    },6500)\r\n    }\r\n    const onMainPlay = ()=>{\r\n        mainbannerPlayRef.current = setInterval(() => {  \r\n            console.log(\"Interval\")   \r\n            slideCall(MainRef.current===6?1:MainRef.current+1,\"main\",500);\r\n    },6500)  \r\n    };\r\n    \r\n    const onClickButton= (num,type) =>{\r\n\r\n        if(type===\"top\"){\r\n            clearInterval(topbannerPlayRef.current)\r\n            slideCall(num,type,500)\r\n            onTopPlay()\r\n        }else if(type===\"main\"){\r\n            clearInterval(mainbannerPlayRef.current )\r\n            slideCall(num,type,500)\r\n            onMainPlay()\r\n        }\r\n        setTimeout(()=>{\r\n            slideCall(num,type,500)\r\n        },300)\r\n    }\r\n    \r\n    const slideCall = (num,type,time) =>{\r\n            type===\"top\"?setTopBannerSet(true):setMainBannerSet(true)\r\n            setTimeout(()=>{\r\n                type===\"top\"?setTopBannerSet(false):setMainBannerSet(false)\r\n                setOrder(num,type);\r\n            },time)     \r\n        };\r\n        return [\r\n            bannerOrder,mainorder,topBannerSet,mainBannerSet,\r\n            {onClickButton,onTopPlay,onMainPlay}];    \r\n    };\r\n \r\n    \r\n\r\n\r\n\r\nexport default MainSlideCall;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}