{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nconst mainSlideCall = () => {\n  _s();\n  const [bannerOrder, setBanner] = useState(1);\n  const bannerRef = useRef(1);\n  const [mainorder, setMaim] = useState(1);\n  const MainRef = useRef(1);\n  const [topBannerSet, setTopBannerSet] = useState(false);\n  const [mainBannerSet, setMainBannerSet] = useState(false);\n  const setOrder = useCallback((num, item) => {\n    if (item == \"top\") {\n      bannerRef.current = num;\n      setBanner(num);\n    } else {\n      item == \"main\";\n    }\n    {\n      bannerRef.current = num;\n      setBanner(num);\n    }\n  }, []);\n  const bannerPlay = () => {\n    return setInterval(() => {\n      slideCall(bannerRef.current == 3 ? 1 : bannerRef.current + 1, \"top\", 1500);\n    }, 7500);\n  };\n  const mainPlay = () => {\n    return setInterval(() => {\n      slideCall(MainRef.current == 6 ? 1 : MainRef.current + 1, \"main\", 1500);\n    }, 7500);\n  };\n  const onClickButton = (num, type) => {\n    setOrder(num, type);\n    clearInterval(type == \"top\" ? bannerPlay() : mainPlay());\n  };\n  const slideCall = (num, item, time) => {\n    item == \"top\" ? setTopBannerSet(true) : setMainBannerSet(true);\n    setTimeout(() => {\n      item == \"top\" ? setTopBannerSet(false) : setMainBannerSet(false);\n      setOrder(num, item);\n    }, time);\n  };\n  return [bannerOrder, mainorder, topBannerSet, mainBannerSet, bannerPlay, mainPlay, onClickButton];\n};\n_s(mainSlideCall, \"KLNzW1QSPGfxFd6P8/xWp00SL88=\");\nexport default mainSlideCall;","map":{"version":3,"names":["useCallback","useState","mainSlideCall","_s","bannerOrder","setBanner","bannerRef","useRef","mainorder","setMaim","MainRef","topBannerSet","setTopBannerSet","mainBannerSet","setMainBannerSet","setOrder","num","item","current","bannerPlay","setInterval","slideCall","mainPlay","onClickButton","type","clearInterval","time","setTimeout"],"sources":["C:/dunkindonuts/donkin_frontend/src/mainSlideCall.js"],"sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\n\r\nconst mainSlideCall = () =>{\r\n\r\n    const [bannerOrder,setBanner] = useState(1);\r\n    const bannerRef = useRef(1)\r\n  \r\n    const [mainorder,setMaim] = useState(1);\r\n    const MainRef = useRef(1)\r\n\r\n    const [topBannerSet, setTopBannerSet] = useState(false);\r\n    const [mainBannerSet, setMainBannerSet] = useState(false);\r\n\r\n    const setOrder = useCallback((num,item) => {\r\n        if(item==\"top\"){\r\n            bannerRef.current = num;\r\n            setBanner(num)\r\n        }else{item==\"main\"}{\r\n            bannerRef.current = num;\r\n            setBanner(num)\r\n        }\r\n  }, []);\r\n\r\n  const bannerPlay = ()=>{\r\n    return setInterval(() => {     \r\n        slideCall(bannerRef.current==3?1:bannerRef.current+1,\"top\",1500);\r\n    }, 7500); \r\n }\r\n const mainPlay = ()=>{\r\n    return setInterval(() => {     \r\n        slideCall(MainRef.current==6?1:MainRef.current+1,\"main\",1500);\r\n    }, 7500); \r\n }\r\n const onClickButton = (num,type)=>{\r\n    setOrder(num,type);\r\n    clearInterval((type==\"top\"?bannerPlay():mainPlay()));\r\n}\r\n    const slideCall = (num,item,time) =>{\r\n        (item==\"top\"?setTopBannerSet(true):setMainBannerSet(true))\r\n        setTimeout(()=>{\r\n        (item==\"top\"?setTopBannerSet(false):setMainBannerSet(false))\r\n            setOrder(num,item);\r\n        },time)\r\n            \r\n        };\r\n    return [bannerOrder,mainorder,topBannerSet,mainBannerSet,bannerPlay,mainPlay,onClickButton];    \r\n\r\n\r\n}\r\nexport default mainSlideCall;"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AAG7C,MAAMC,aAAa,GAAGA,CAAA,KAAK;EAAAC,EAAA;EAEvB,MAAM,CAACC,WAAW,EAACC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAMK,SAAS,GAAGC,MAAM,CAAC,CAAC,CAAC;EAE3B,MAAM,CAACC,SAAS,EAACC,OAAO,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAMS,OAAO,GAAGH,MAAM,CAAC,CAAC,CAAC;EAEzB,MAAM,CAACI,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMc,QAAQ,GAAGf,WAAW,CAAC,CAACgB,GAAG,EAACC,IAAI,KAAK;IACvC,IAAGA,IAAI,IAAE,KAAK,EAAC;MACXX,SAAS,CAACY,OAAO,GAAGF,GAAG;MACvBX,SAAS,CAACW,GAAG,CAAC;IAClB,CAAC,MAAI;MAACC,IAAI,IAAE,MAAM;IAAA;IAAC;MACfX,SAAS,CAACY,OAAO,GAAGF,GAAG;MACvBX,SAAS,CAACW,GAAG,CAAC;IAClB;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,UAAU,GAAGA,CAAA,KAAI;IACrB,OAAOC,WAAW,CAAC,MAAM;MACrBC,SAAS,CAACf,SAAS,CAACY,OAAO,IAAE,CAAC,GAAC,CAAC,GAACZ,SAAS,CAACY,OAAO,GAAC,CAAC,EAAC,KAAK,EAAC,IAAI,CAAC;IACpE,CAAC,EAAE,IAAI,CAAC;EACX,CAAC;EACD,MAAMI,QAAQ,GAAGA,CAAA,KAAI;IAClB,OAAOF,WAAW,CAAC,MAAM;MACrBC,SAAS,CAACX,OAAO,CAACQ,OAAO,IAAE,CAAC,GAAC,CAAC,GAACR,OAAO,CAACQ,OAAO,GAAC,CAAC,EAAC,MAAM,EAAC,IAAI,CAAC;IACjE,CAAC,EAAE,IAAI,CAAC;EACX,CAAC;EACD,MAAMK,aAAa,GAAGA,CAACP,GAAG,EAACQ,IAAI,KAAG;IAC/BT,QAAQ,CAACC,GAAG,EAACQ,IAAI,CAAC;IAClBC,aAAa,CAAED,IAAI,IAAE,KAAK,GAACL,UAAU,CAAC,CAAC,GAACG,QAAQ,CAAC,CAAE,CAAC;EACxD,CAAC;EACG,MAAMD,SAAS,GAAGA,CAACL,GAAG,EAACC,IAAI,EAACS,IAAI,KAAI;IAC/BT,IAAI,IAAE,KAAK,GAACL,eAAe,CAAC,IAAI,CAAC,GAACE,gBAAgB,CAAC,IAAI,CAAC;IACzDa,UAAU,CAAC,MAAI;MACdV,IAAI,IAAE,KAAK,GAACL,eAAe,CAAC,KAAK,CAAC,GAACE,gBAAgB,CAAC,KAAK,CAAC;MACvDC,QAAQ,CAACC,GAAG,EAACC,IAAI,CAAC;IACtB,CAAC,EAACS,IAAI,CAAC;EAEP,CAAC;EACL,OAAO,CAACtB,WAAW,EAACI,SAAS,EAACG,YAAY,EAACE,aAAa,EAACM,UAAU,EAACG,QAAQ,EAACC,aAAa,CAAC;AAG/F,CAAC;AAAApB,EAAA,CA9CKD,aAAa;AA+CnB,eAAeA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}